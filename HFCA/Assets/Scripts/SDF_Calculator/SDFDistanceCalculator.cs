using System.Globalization;
using UnityEngine;
using UnityEngine.UI;

namespace SDF_Calculator
{
    public class SDFDistanceCalculator : MonoBehaviour
    {
        public Texture3D sdfTexture;
        // now (32.48,31.3,3.36) is center
        public Transform targetPoint;
        public Text text;

        private void Start()
        {
            // Check whether the SDF Texture has been assigned
            if (sdfTexture == null)
            {
                Debug.LogError("SDF Texture not assigned! Please assign the Texture3D generated by SDF bake tool.");
                return;
            }

            // Converts the world coordinates of the target point to the local space coordinates of Texture3D
            var textureSpacePoint = WorldToTextureSpace(targetPoint.position, sdfTexture);

            // Gets the value of the corresponding pixel position (distance)
            var distanceColor = sdfTexture.GetPixelBilinear(textureSpacePoint.x, textureSpacePoint.y, textureSpacePoint.z);

            // Converts pixel values to actual distances
            var distanceToMesh =
                distanceColor.r; // It is assumed that the distance information is stored in the red channel

            // Adjust the distance value according to the scale and offset of the actual scene (if necessary)
            // distanceToMesh = distanceToMesh * scaleFactor + offset;

            text.text = distanceToMesh.ToString(CultureInfo.InvariantCulture);
            //Debug.Log("Distance to Mesh: " + distanceToMesh);
        }

        private void Update()
        {
            // Converts the world coordinates of the target point to the local space coordinates of Texture3D
            var textureSpacePoint = WorldToTextureSpace(targetPoint.position, sdfTexture);

            // Gets the value of the corresponding pixel position (distance)
            var distanceColor = sdfTexture.GetPixelBilinear(textureSpacePoint.x, textureSpacePoint.y, textureSpacePoint.z);

            // Converts pixel values to actual distances
            var distanceToMesh =
                distanceColor.r; // It is assumed that the distance information is stored in the red channel

            // Adjust the distance value according to the scale and offset of the actual scene (if necessary)
            // distanceToMesh = distanceToMesh * scaleFactor + offset;


            //Debug.Log("Distance to Mesh: " + distanceToMesh);
            text.text = distanceToMesh.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// Convert the world coordinates of the target point to the local space coordinates of Texture3D
        /// </summary>
        /// <param name="worldPosition"></param>
        /// <param name="texture"></param>
        /// <returns></returns>
        private static Vector3 WorldToTextureSpace(Vector3 worldPosition, Texture3D texture)
        {
            // Gets the dimensions of Texture3D
            var textureSize = new Vector3(texture.width, texture.height, texture.depth);

            // Calculate the range of texture coordinates
            // assuming that Texture3D is between (0,0,0) and (1,1,1)
            var normalizedPosition = new Vector3(
                worldPosition.x / textureSize.x,
                worldPosition.y / textureSize.y,
                worldPosition.z / textureSize.z
            );

            return normalizedPosition;
        }
    }
}